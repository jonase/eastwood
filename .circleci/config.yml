version: 2.1

orbs:
  shellcheck: circleci/shellcheck@2.2.3

executor_defaults: &executor_defaults
  working_directory: ~/repo

env_defaults: &env_defaults
  LEIN_DEPS_COMMAND: "lein with-profile -user,+test,+test-3rd-party-deps,+antq,+clj-kondo deps"
  LEIN_ROOT: "true"
  LINT_SCRIPT: ".circleci/lint.sh"

older_jdk_env_defaults: &older_jdk_env_defaults
  JVM_OPTS: -Xmx3200m

newer_jdk_env_defaults: &newer_jdk_env_defaults
  JVM_OPTS: -Xmx3200m --illegal-access=deny

# We exercise the following JVMs:
# * those officially supported by Clojure (atm: 8 and 11)
# * plus, whatever the latest version is.
executors:
  openjdk8:
    docker:
      - image: circleci/clojure:openjdk-8-lein-2.9.5
    environment:
      <<: *env_defaults
      <<: *older_jdk_env_defaults
    <<: *executor_defaults
  openjdk11:
    docker:
      - image: circleci/clojure:openjdk-11-lein-2.9.5
    environment:
      <<: *env_defaults
      <<: *newer_jdk_env_defaults
    <<: *executor_defaults
  openjdk16:
    docker:
      - image: circleci/clojure:openjdk-16-lein-2.9.5-buster
    environment:
      <<: *env_defaults
      <<: *newer_jdk_env_defaults
    <<: *executor_defaults
  openjdk17:
    docker:
      - image: circleci/clojure:openjdk-17-lein-2.9.5-buster
    environment:
      <<: *env_defaults
      <<: *newer_jdk_env_defaults
    <<: *executor_defaults

jobs:
  test:
    parameters:
      executor:
        type: executor
      clojure-version:
        type: string
    executor: << parameters.executor >>
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "project.clj" }}

      - run:
          name: Fetch dependencies
          command: "$LEIN_DEPS_COMMAND"

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "project.clj" }}

      - run:
          name: Prevent any form of caching, for the next step
          command: git clean -fdx

      - run:
          name: Run Eastwood against itself
          command: EVAL_IN_LEININGEN=1 lein with-profile -user,+eastwood-plugin,+deep-diff,+self-lint eastwood

      - run:
          name: Prevent any form of caching, for the next step
          command:  git clean -fdx

      - run:
          name: prepare test .jar
          command: cd .circleci/reflection-example/; lein jar; cd -

      - run:
          name: Run normal test suite
          command: lein with-profile -user,-dev,+test,+warn-on-reflection,+deep-diff,+<< parameters.clojure-version >> do clean, test

      - run:
          name: Install Clojure
          command: |
            wget -nc https://download.clojure.org/install/linux-install-1.10.3.855.sh
            chmod +x linux-install-1.10.3.855.sh
            sudo ./linux-install-1.10.3.855.sh

      - run:
          # Aims to exercise that the plugin can be run in external projects, and that the `-main` program works:
          name: minimal integration test against example projects
          command: JVM_OPTS= .circleci/integration_test.sh

  test_third_party_deps:
    parameters:
      executor:
        type: executor
      clojure-version:
        type: string
    executor: << parameters.executor >>
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "project.clj" }}

      - run:
          name: Fetch dependencies
          command: "$LEIN_DEPS_COMMAND"

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "project.clj" }}

      - run:
          name: Prevent any form of caching, for the next step
          command:  git clean -fdx

      - run:
          name: Run test suite that exercises 3rd-party libs
          command: lein with-profile -user,-dev,+test,+warn-on-reflection,+test-3rd-party-deps,+deep-diff,+<< parameters.clojure-version >> do clean, test

      - run:
          name: Prevent any form of caching, for the next step
          command:  git clean -fdx

      - run:
          name: Run test suite that exercises clojure.core
          command: lein with-profile -user,-dev,+test,+warn-on-reflection,+clojure-core-test,+deep-diff,+<< parameters.clojure-version >> do clean, test

      - run:
          name: Run test suite that exercises var-info.edn
          command: lein with-profile -user,-dev,+test,+warn-on-reflection,+var-info-test,+deep-diff,+<< parameters.clojure-version >> do clean, test

  lint:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - checkout
      - shellcheck/install

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "project.clj" }}

      - restore_cache:
          keys:
            - v2-dependencies-LINT-{{ checksum "project.clj" }}

      - run:
          name: Fetch dependencies
          command: "$LEIN_DEPS_COMMAND"

      - run:
          name: Fetch NVD dependencies
          command: cd .circleci/nvd; lein deps

      - save_cache:
          paths:
            - ~/.m2
          key: v2-dependencies-LINT-{{ checksum "project.clj" }}

      # aides creating a cache key that will last 24h.
      # This speeds up the nvd-clojure script fast/stable while also keeping it reasonable up-to-date:
      - run: date +'%m/%d/%Y' > today

      - restore_cache:
          keys:
            - v2-nvd-data-{{ checksum "project.clj" }}-{{checksum "today"}}

      - run:
          name: Install Clojure
          command: |
            wget -nc https://download.clojure.org/install/linux-install-1.10.3.855.sh
            chmod +x linux-install-1.10.3.855.sh
            sudo ./linux-install-1.10.3.855.sh

      - run: "shellcheck .circleci/*.sh"
      - run: "$LINT_SCRIPT"

      - save_cache:
          paths:
            - ~/.m2/repository/org/owasp/dependency-check-utils/8.2.1/data
          key: v2-nvd-data-{{ checksum "project.clj" }}-{{checksum "today"}}

  crucible:
    parameters:
      executor:
        type: executor
      extra-profile:
        type: string
    executor: << parameters.executor >>
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "project.clj" }}

      - run:
          name: Fetch dependencies
          command: "$LEIN_DEPS_COMMAND"

      - run:
          name: Prepare for Crucible
          command: JVM_OPTS= .circleci/crucible_prep.sh

      - run:
          name: Run against a variety of real-world projects
          command: JVM_OPTS= EXTRA_PROFILE="<< parameters.extra-profile >>" .circleci/crucible.sh

  build:
    docker:
      # specify the version you desire here
      - image: circleci/clojure:openjdk-8-lein-2.9.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      LEIN_ROOT: "true"
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "project.clj" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: "$LEIN_DEPS_COMMAND"

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "project.clj" }}

      - run:
          name: Ensure No Reflection Warnings
          command: "! lein check 2>&1 | grep 'Reflection warning'"

  deploy:
    docker:
      - image: circleci/clojure:openjdk-8-lein-2.9.1

    working_directory: ~/repo

    environment:
      LEIN_ROOT: "true"
      JVM_OPTS: -Xmx3200m

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "project.clj" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Install Clojure
          command: |
            wget -nc https://download.clojure.org/install/linux-install-1.10.3.855.sh
            chmod +x linux-install-1.10.3.855.sh
            sudo ./linux-install-1.10.3.855.sh

      - run: "$LEIN_DEPS_COMMAND"

      - run:
          name: Setup GPG signing key
          command: |
            GNUPGHOME="$HOME/.gnupg"
            export GNUPGHOME
            mkdir -p "$GNUPGHOME"
            chmod 0700 "$GNUPGHOME"
            echo "no-tty" >> "$GNUPGHOME"/gpg.conf
            echo "batch" >> "$GNUPGHOME"/gpg.conf

            echo "$GPG_KEY" \
                  | base64 --decode --ignore-garbage \
                  | gpg --batch --allow-secret-key-import --import

                  gpg --keyid-format LONG --list-secret-keys

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "project.clj" }}
      - run:
         name: Deploy
         command: |
           GPG_TTY=$(tty)
           export GPG_TTY
           echo $GPG_TTY
           clojure -M -i .circleci/maybe_deploy.clj -m maybe-deploy lein with-profile -user,-dev,+eastwood-plugin deploy clojars

workflows:
  nvd:
    triggers:
      - schedule:
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - master
                - dev
    jobs:
      - lint:
          matrix:
            parameters:
              # Just one executor - nvd/kondo/antq results are not expected to vary per platform:
              executor: [openjdk17]
  default:
    jobs:
      - test:
          filters:
            tags:
              only: /.*/
          matrix:
            parameters:
              executor: [openjdk8, openjdk11, openjdk16, openjdk17]
              # NOTE: if adding a new Clojure version here, please be sure var-info.edn remains up-to-date.
              # you can use the :check-var-info Lein profile for that.
              clojure-version: ["1.7", "1.8", "1.9", "1.10.1", "1.10.2", "1.10.3", "1.11"]
      # the `test_third_party_deps` profile uses a separate matrix because the contained libs (especially the ones that use clojure.spec)
      # don't target older versions.
      - test_third_party_deps:
          matrix:
            parameters:
              executor: [openjdk8, openjdk11, openjdk16, openjdk17]
              # Run just the latest version. This saves resources trusts that the main test suite already exercises clojure compat sufficiently:
              clojure-version: ["1.10.3", "1.11"]
      - lint:
          # add some requires for not running nvd-clojure so often:
          requires:
            - test
            - test_third_party_deps
          matrix:
            parameters:
              # Just one executor - nvd/kondo/antq results are not expected to vary per platform:
              executor: [openjdk17]
      - crucible:
          requires:
            - lint
          matrix:
            parameters:
              executor: [openjdk8, openjdk11, openjdk17]
              extra-profile: ["", ",+eastwood-ci-clojure-1-10", ",+eastwood-ci-clojure-1-11"]

      - deploy:
          requires:
            - test
            - test_third_party_deps
            - lint
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+(-alpha\d+)?$/
