version: 2.1

executor_defaults: &executor_defaults
  # xlarge: use as many CPU cores as possible, to exercise parallelism as realistically as possible
  # xlarge is only applied in paid accounts and gracefully degrades to a compatible resource_class in regular accounts
  resource_class: xlarge
  working_directory: ~/repo

executors:
  openjdk8:
    docker:
      - image: circleci/clojure:openjdk-8-lein-2.9.5
    environment:
      LEIN_ROOT: "true"
      JVM_OPTS: -Xmx3200m
    <<: *executor_defaults
  openjdk11:
    docker:
      - image: circleci/clojure:openjdk-11-lein-2.9.5
    environment:
      LEIN_ROOT: "true"
      JVM_OPTS: -Xmx3200m --illegal-access=deny
    <<: *executor_defaults

jobs:
  test:
    parameters:
      executor:
        type: executor
      clojure-version:
        type: string
    executor: << parameters.executor >>
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "project.clj" }}

      - run:
          name: Fetch dependencies
          command: |
            lein with-profile +test,+test-3rd-party-deps, deps

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "project.clj" }}

      - run:
          name: Prevent any form of caching, for the next step
          command: git clean -fdx

      - run:
          name: Run Eastwood against itself
          command: EVAL_IN_LEININGEN=1 lein with-profile +eastwood-plugin eastwood

      - run:
          name: Prevent any form of caching, for the next step
          command:  git clean -fdx

      - run:
          name: Run normal test suite
          command: lein with-profile -user,-dev,+test,+warn-on-reflection,+<< parameters.clojure-version >> do clean, test

  test_third_party_deps:
    parameters:
      executor:
        type: executor
      clojure-version:
        type: string
    executor: << parameters.executor >>
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "project.clj" }}

      - run:
          name: Fetch dependencies
          command: |
            lein with-profile +test,+test-3rd-party-deps, deps

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "project.clj" }}

      - run:
          name: Prevent any form of caching, for the next step
          command:  git clean -fdx

      - run:
          name: Run test suite that exercises 3rd-party libs
          command: lein with-profile -user,-dev,+test,+warn-on-reflection,+test-3rd-party-deps,+<< parameters.clojure-version >> do clean, test


  build:
    docker:
      # specify the version you desire here
      - image: circleci/clojure:openjdk-8-lein-2.9.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      LEIN_ROOT: "true"
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "project.clj" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: lein deps

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "project.clj" }}

      - run:
          name: Ensure No Reflection Warnings
          command: "! lein check 2>&1 | grep 'Reflection warning'"

  deploy:
    docker:
      # specify the version you desire here
      - image: circleci/clojure:openjdk-8-lein-2.9.1
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      LEIN_ROOT: "true"
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "project.clj" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "project.clj" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
         name: Install babashka
         command: |
           curl -s https://raw.githubusercontent.com/borkdude/babashka/master/install -o install.sh
           sudo bash install.sh
           rm install.sh
      - run:
          name: Install deployment-script
          command: |
            curl -s https://raw.githubusercontent.com/clj-commons/infra/main/deployment/circle-maybe-deploy.bb -o circle-maybe-deploy.bb
            chmod a+x circle-maybe-deploy.bb

      - run: lein deps

      - run:
          name: Setup GPG signing key
          command: |
            GNUPGHOME="$HOME/.gnupg"
            export GNUPGHOME
            mkdir -p "$GNUPGHOME"
            chmod 0700 "$GNUPGHOME"

            if [ -n "$GPG_KEY" ]; then
	      echo "$GPG_KEY" \
                 | base64 --decode --ignore-garbage \
                 | gpg --batch --allow-secret-key-import --import

                 gpg --keyid-format LONG --list-secret-keys
            fi

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "project.clj" }}
      - run:
         name: Deploy
         command: |
           GPG_TTY=$(tty)
           export GPG_TTY
           echo $GPG_TTY
	   if [ -n "$GPG_KEY" ]; then
              ./circle-maybe-deploy.bb lein with-profile -dev,+eastwood-plugin deploy clojars
           fi

workflows:
  default:
    jobs:
      - test:
          filters:
            tags:
              only: /.*/
          matrix:
            parameters:
              executor: [openjdk8, openjdk11]
              clojure-version: ["1.7", "1.8", "1.9", "1.10.1", "1.10.2", "1.10.3"]
      # the `test_third_party_deps` profile uses a separate matrix because the contained libs (especially the ones that use clojure.spec)
      # don't target older versions.
      - test_third_party_deps:
          matrix:
            parameters:
              executor: [openjdk8, openjdk11]
              # Run just the latest version. This saves resources trusts that the main test suite already exercises clojure compat sufficiently:
              clojure-version: ["1.10.3"]

      - deploy:
          requires:
            - test
            - test_third_party_deps
          filters:
            tags:
              only: /Release-.*/
